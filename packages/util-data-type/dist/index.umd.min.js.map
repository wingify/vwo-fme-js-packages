{"version":3,"file":"index.umd.min.js","mappings":"CAAA,SAA2CA,EAAMC,GAE1B,iBAAZC,SAA0C,iBAAXC,OACxCA,OAAOD,QAAUD,IAEQ,mBAAXG,QAAyBA,OAAOC,IAC9CD,OAAO,GAAIH,GAEe,iBAAZC,QACdA,QAA4B,mBAAID,IAGhCD,EAAyB,mBAAIC,GAC9B,CAbD,CAaGK,MAAM,I,gDCIT,SAASC,EAASC,GAEd,MAA+C,oBAAxCC,OAAOC,UAAUC,SAASC,KAAKJ,EAC1C,CAMA,SAASK,EAAQL,GACb,MAA+C,mBAAxCC,OAAOC,UAAUC,SAASC,KAAKJ,EAC1C,CAMA,SAASM,EAAON,GACZ,MAA+C,kBAAxCC,OAAOC,UAAUC,SAASC,KAAKJ,EAC1C,CAMA,SAASO,EAAYP,GACjB,MAA+C,uBAAxCC,OAAOC,UAAUC,SAASC,KAAKJ,EAC1C,CAMA,SAASQ,EAASR,GAEd,MAA+C,oBAAxCC,OAAOC,UAAUC,SAASC,KAAKJ,EAC1C,CAMA,SAASS,EAAST,GACd,MAA+C,oBAAxCC,OAAOC,UAAUC,SAASC,KAAKJ,EAC1C,CAMA,SAASU,EAAUV,GACf,MAA+C,qBAAxCC,OAAOC,UAAUC,SAASC,KAAKJ,EAC1C,CAMA,SAASW,EAAWX,GAChB,MAA+C,sBAAxCC,OAAOC,UAAUC,SAASC,KAAKJ,EAC1C,CAMA,SAASY,EAAUZ,GACf,MAA+C,qBAAxCC,OAAOC,UAAUC,SAASC,KAAKJ,EAC1C,CApFAC,OAAOY,eAAenB,EAAS,aAAc,CAAEoB,OAAO,IACtDpB,EAAQK,SAAWA,EACnBL,EAAQW,QAAUA,EAClBX,EAAQY,OAASA,EACjBZ,EAAQa,YAAcA,EACtBb,EAAQc,SAAWA,EACnBd,EAAQe,SAAWA,EACnBf,EAAQgB,UAAYA,EACpBhB,EAAQiB,WAAaA,EACrBjB,EAAQkB,UAAYA,EACpBlB,EAAQqB,QAgFR,SAAiBf,GAEb,OAAOD,EAASC,GACV,SAEEK,EAAQL,GACF,QAEEM,EAAON,GACD,OAEEO,EAAYP,GACN,YAEEQ,EAASR,GACH,SAEES,EAAST,GACH,SAEEU,EAAUV,GACJ,UAEEW,EAAWX,GACL,WAEEY,EAAUZ,GACJ,UAEE,cAC5E,C","sources":["webpack://vwoFmeUtilDataType/webpack/universalModuleDefinition","webpack://vwoFmeUtilDataType/./src/index.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\t// CommonJS2\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\t// AMD\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\t// CommonJS\n\telse if(typeof exports === 'object')\n\t\texports[\"vwoFmeUtilDataType\"] = factory();\n\t// Root\n\telse\n\t\troot[\"vwoFmeUtilDataType\"] = factory();\n})(this, () => {\nreturn ","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.isObject = isObject;\nexports.isArray = isArray;\nexports.isNull = isNull;\nexports.isUndefined = isUndefined;\nexports.isNumber = isNumber;\nexports.isString = isString;\nexports.isBoolean = isBoolean;\nexports.isFunction = isFunction;\nexports.isPromise = isPromise;\nexports.getType = getType;\n/**\n * Checks if a value is an object excluding arrays, functions, regexes, promises, and dates.\n * @param val The value to check.\n * @returns True if the value is an object, false otherwise.\n */\nfunction isObject(val) {\n    // Using Object.prototype.toString to get a precise string representation of the value type\n    return Object.prototype.toString.call(val) === '[object Object]';\n}\n/**\n * Checks if a value is an array.\n * @param val The value to check.\n * @returns True if the value is an array, false otherwise.\n */\nfunction isArray(val) {\n    return Object.prototype.toString.call(val) === '[object Array]';\n}\n/**\n * Checks if a value is null.\n * @param val The value to check.\n * @returns True if the value is null, false otherwise.\n */\nfunction isNull(val) {\n    return Object.prototype.toString.call(val) === '[object Null]';\n}\n/**\n * Checks if a value is undefined.\n * @param val The value to check.\n * @returns True if the value is undefined, false otherwise.\n */\nfunction isUndefined(val) {\n    return Object.prototype.toString.call(val) === '[object Undefined]';\n}\n/**\n * Checks if a value is a number, including NaN.\n * @param val The value to check.\n * @returns True if the value is a number, false otherwise.\n */\nfunction isNumber(val) {\n    // Note: NaN is also a number\n    return Object.prototype.toString.call(val) === '[object Number]';\n}\n/**\n * Checks if a value is a string.\n * @param val The value to check.\n * @returns True if the value is a string, false otherwise.\n */\nfunction isString(val) {\n    return Object.prototype.toString.call(val) === '[object String]';\n}\n/**\n * Checks if a value is a boolean.\n * @param val The value to check.\n * @returns True if the value is a boolean, false otherwise.\n */\nfunction isBoolean(val) {\n    return Object.prototype.toString.call(val) === '[object Boolean]';\n}\n/**\n * Checks if a value is a function.\n * @param val The value to check.\n * @returns True if the value is a function, false otherwise.\n */\nfunction isFunction(val) {\n    return Object.prototype.toString.call(val) === '[object Function]';\n}\n/**\n * Checks if a value is a Promise.\n * @param val The value to check.\n * @returns True if the value is a Promise, false otherwise.\n */\nfunction isPromise(val) {\n    return Object.prototype.toString.call(val) === '[object Promise]';\n}\n/**\n * Determines the type of the given value using various type-checking utility functions.\n * @param val The value to determine the type of.\n * @returns A string representing the type of the value.\n */\nfunction getType(val) {\n    // Check if the value is an Object (excluding arrays, functions, etc.)\n    return isObject(val)\n        ? 'Object'\n        : // Check if the value is an Array\n            isArray(val)\n                ? 'Array'\n                : // Check if the value is null\n                    isNull(val)\n                        ? 'Null'\n                        : // Check if the value is undefined\n                            isUndefined(val)\n                                ? 'Undefined'\n                                : // Check if the value is NaN (Not a Number)\n                                    isNumber(val)\n                                        ? 'Number'\n                                        : // Check if the value is a String\n                                            isString(val)\n                                                ? 'String'\n                                                : // Check if the value is a Boolean\n                                                    isBoolean(val)\n                                                        ? 'Boolean'\n                                                        : // Check if the value is a Function\n                                                            isFunction(val)\n                                                                ? 'Function'\n                                                                : // Check if the value is a Promise\n                                                                    isPromise(val)\n                                                                        ? 'Promise'\n                                                                        : // If none of the above, return 'Unknown Type'\n                                                                            'Unknown Type';\n}\n"],"names":["root","factory","exports","module","define","amd","this","isObject","val","Object","prototype","toString","call","isArray","isNull","isUndefined","isNumber","isString","isBoolean","isFunction","isPromise","defineProperty","value","getType"],"sourceRoot":""}