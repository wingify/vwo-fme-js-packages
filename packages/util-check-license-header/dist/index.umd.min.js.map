{"version":3,"file":"index.umd.min.js","mappings":"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","sources":["webpack://vwoFmeCheckLicenseHeaderUtil/webpack/universalModuleDefinition","webpack://vwoFmeCheckLicenseHeaderUtil/../../node_modules/.pnpm/minimatch@10.0.1/node_modules/minimatch/dist/commonjs/assert-valid-pattern.js","webpack://vwoFmeCheckLicenseHeaderUtil/../../node_modules/.pnpm/minimatch@10.0.1/node_modules/minimatch/dist/commonjs/brace-expressions.js","webpack://vwoFmeCheckLicenseHeaderUtil/./src/CheckLicenseUtil.ts","webpack://vwoFmeCheckLicenseHeaderUtil/../../node_modules/.pnpm/minimatch@10.0.1/node_modules/minimatch/dist/commonjs/index.js","webpack://vwoFmeCheckLicenseHeaderUtil/../../node_modules/.pnpm/balanced-match@1.0.2/node_modules/balanced-match/index.js","webpack://vwoFmeCheckLicenseHeaderUtil/../../node_modules/.pnpm/minimatch@10.0.1/node_modules/minimatch/dist/commonjs/escape.js","webpack://vwoFmeCheckLicenseHeaderUtil/../../node_modules/.pnpm/brace-expansion@2.0.1/node_modules/brace-expansion/index.js","webpack://vwoFmeCheckLicenseHeaderUtil/../../node_modules/.pnpm/minimatch@10.0.1/node_modules/minimatch/dist/commonjs/ast.js","webpack://vwoFmeCheckLicenseHeaderUtil/../../node_modules/.pnpm/minimatch@10.0.1/node_modules/minimatch/dist/commonjs/unescape.js","webpack://vwoFmeCheckLicenseHeaderUtil/external node-commonjs \"fs\"","webpack://vwoFmeCheckLicenseHeaderUtil/./src/AnsiColorEnum.ts","webpack://vwoFmeCheckLicenseHeaderUtil/webpack/bootstrap","webpack://vwoFmeCheckLicenseHeaderUtil/./src/index.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\t// CommonJS2\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\t// AMD\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\t// CommonJS\n\telse if(typeof exports === 'object')\n\t\texports[\"vwoFmeCheckLicenseHeaderUtil\"] = factory();\n\t// Root\n\telse\n\t\troot[\"vwoFmeCheckLicenseHeaderUtil\"] = factory();\n})(this, () => {\nreturn ","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.assertValidPattern = void 0;\nconst MAX_PATTERN_LENGTH = 1024 * 64;\nconst assertValidPattern = (pattern) => {\n    if (typeof pattern !== 'string') {\n        throw new TypeError('invalid pattern');\n    }\n    if (pattern.length > MAX_PATTERN_LENGTH) {\n        throw new TypeError('pattern is too long');\n    }\n};\nexports.assertValidPattern = assertValidPattern;\n//# sourceMappingURL=assert-valid-pattern.js.map","\"use strict\";\n// translate the various posix character classes into unicode properties\n// this works across all unicode locales\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.parseClass = void 0;\n// { <posix class>: [<translation>, /u flag required, negated]\nconst posixClasses = {\n    '[:alnum:]': ['\\\\p{L}\\\\p{Nl}\\\\p{Nd}', true],\n    '[:alpha:]': ['\\\\p{L}\\\\p{Nl}', true],\n    '[:ascii:]': ['\\\\x' + '00-\\\\x' + '7f', false],\n    '[:blank:]': ['\\\\p{Zs}\\\\t', true],\n    '[:cntrl:]': ['\\\\p{Cc}', true],\n    '[:digit:]': ['\\\\p{Nd}', true],\n    '[:graph:]': ['\\\\p{Z}\\\\p{C}', true, true],\n    '[:lower:]': ['\\\\p{Ll}', true],\n    '[:print:]': ['\\\\p{C}', true],\n    '[:punct:]': ['\\\\p{P}', true],\n    '[:space:]': ['\\\\p{Z}\\\\t\\\\r\\\\n\\\\v\\\\f', true],\n    '[:upper:]': ['\\\\p{Lu}', true],\n    '[:word:]': ['\\\\p{L}\\\\p{Nl}\\\\p{Nd}\\\\p{Pc}', true],\n    '[:xdigit:]': ['A-Fa-f0-9', false],\n};\n// only need to escape a few things inside of brace expressions\n// escapes: [ \\ ] -\nconst braceEscape = (s) => s.replace(/[[\\]\\\\-]/g, '\\\\$&');\n// escape all regexp magic characters\nconst regexpEscape = (s) => s.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&');\n// everything has already been escaped, we just have to join\nconst rangesToString = (ranges) => ranges.join('');\n// takes a glob string at a posix brace expression, and returns\n// an equivalent regular expression source, and boolean indicating\n// whether the /u flag needs to be applied, and the number of chars\n// consumed to parse the character class.\n// This also removes out of order ranges, and returns ($.) if the\n// entire class just no good.\nconst parseClass = (glob, position) => {\n    const pos = position;\n    /* c8 ignore start */\n    if (glob.charAt(pos) !== '[') {\n        throw new Error('not in a brace expression');\n    }\n    /* c8 ignore stop */\n    const ranges = [];\n    const negs = [];\n    let i = pos + 1;\n    let sawStart = false;\n    let uflag = false;\n    let escaping = false;\n    let negate = false;\n    let endPos = pos;\n    let rangeStart = '';\n    WHILE: while (i < glob.length) {\n        const c = glob.charAt(i);\n        if ((c === '!' || c === '^') && i === pos + 1) {\n            negate = true;\n            i++;\n            continue;\n        }\n        if (c === ']' && sawStart && !escaping) {\n            endPos = i + 1;\n            break;\n        }\n        sawStart = true;\n        if (c === '\\\\') {\n            if (!escaping) {\n                escaping = true;\n                i++;\n                continue;\n            }\n            // escaped \\ char, fall through and treat like normal char\n        }\n        if (c === '[' && !escaping) {\n            // either a posix class, a collation equivalent, or just a [\n            for (const [cls, [unip, u, neg]] of Object.entries(posixClasses)) {\n                if (glob.startsWith(cls, i)) {\n                    // invalid, [a-[] is fine, but not [a-[:alpha]]\n                    if (rangeStart) {\n                        return ['$.', false, glob.length - pos, true];\n                    }\n                    i += cls.length;\n                    if (neg)\n                        negs.push(unip);\n                    else\n                        ranges.push(unip);\n                    uflag = uflag || u;\n                    continue WHILE;\n                }\n            }\n        }\n        // now it's just a normal character, effectively\n        escaping = false;\n        if (rangeStart) {\n            // throw this range away if it's not valid, but others\n            // can still match.\n            if (c > rangeStart) {\n                ranges.push(braceEscape(rangeStart) + '-' + braceEscape(c));\n            }\n            else if (c === rangeStart) {\n                ranges.push(braceEscape(c));\n            }\n            rangeStart = '';\n            i++;\n            continue;\n        }\n        // now might be the start of a range.\n        // can be either c-d or c-] or c<more...>] or c] at this point\n        if (glob.startsWith('-]', i + 1)) {\n            ranges.push(braceEscape(c + '-'));\n            i += 2;\n            continue;\n        }\n        if (glob.startsWith('-', i + 1)) {\n            rangeStart = c;\n            i += 2;\n            continue;\n        }\n        // not the start of a range, just a single character\n        ranges.push(braceEscape(c));\n        i++;\n    }\n    if (endPos < i) {\n        // didn't see the end of the class, not a valid class,\n        // but might still be valid as a literal match.\n        return ['', false, 0, false];\n    }\n    // if we got no ranges and no negates, then we have a range that\n    // cannot possibly match anything, and that poisons the whole glob\n    if (!ranges.length && !negs.length) {\n        return ['$.', false, glob.length - pos, true];\n    }\n    // if we got one positive range, and it's a single character, then that's\n    // not actually a magic pattern, it's just that one literal character.\n    // we should not treat that as \"magic\", we should just return the literal\n    // character. [_] is a perfectly valid way to escape glob magic chars.\n    if (negs.length === 0 &&\n        ranges.length === 1 &&\n        /^\\\\?.$/.test(ranges[0]) &&\n        !negate) {\n        const r = ranges[0].length === 2 ? ranges[0].slice(-1) : ranges[0];\n        return [regexpEscape(r), false, endPos - pos, false];\n    }\n    const sranges = '[' + (negate ? '^' : '') + rangesToString(ranges) + ']';\n    const snegs = '[' + (negate ? '' : '^') + rangesToString(negs) + ']';\n    const comb = ranges.length && negs.length\n        ? '(' + sranges + '|' + snegs + ')'\n        : ranges.length\n            ? sranges\n            : snegs;\n    return [comb, uflag, endPos - pos, true];\n};\nexports.parseClass = parseClass;\n//# sourceMappingURL=brace-expressions.js.map","\"use strict\";\n/**\n * Copyright 2025 Wingify Software Pvt. Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.checkLicenseAndCopyright = checkLicenseAndCopyright;\n/**\n * This file's code is ported to NodeJs (and is modified by Wingify) from:\n *\n * URL - https://github.com/facultyai/apache-license-check/blob/master/apache_license_check.py\n * Description - Check Python source files for Apache License headers\n * Author - Andrew Crozier https://github.com/acroz\n * License - Apache 2.0\n * Copyright 2019 Faculty Science Limited\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst fs = require(\"fs\");\nconst AnsiColorEnum_1 = require(\"./AnsiColorEnum\");\nconst minimatch_1 = require(\"minimatch\");\nconst DEFAULT_STOPPING_CRITERIA = 'SOME_GARBAGE_TEXT_which_NEVER_MATCHES_THIS';\nconst SUCCESS_MESSAGE = '> LICENSE/COPYRIGHT header present in all files with correct format';\nconst INITIAL_MESSAGE = '> Checking license and copyright headers in files...';\nconst FAILURE_MESSAGE = '> LICENSE/COPYRIGHT header is missing. Please check above errors.';\nconst NOT_PRESENT_MESSAGE = 'NOT PRESENT / WRONG FORMAT';\nconst MISSING_PARAMS_MESSAGE = 'Options: paths, author, year and extensions are mandatory';\nconst LICENSE_HEADER_TEMPLATE = `\nCopyright {year} {author}\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n  http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n`;\n/**\n * Recursively collects all files with the given extensions, excluding specified paths.\n * @param {Object} params\n * @param {string} params.dirPath - Directory path to start searching from.\n * @param {string[]} params.excludes - List of paths to exclude from search.\n * @param {string[]} params.extensions - List of file extensions to include.\n * @param {string[]} params.collectedFiles - Array to collect found file paths.\n */\nfunction collectFiles({ dirPath, excludes, extensions, collectedFiles }) {\n    if (excludes.some((exclude) => (0, minimatch_1.minimatch)(dirPath, exclude)))\n        return;\n    if (fs.existsSync(dirPath) && fs.lstatSync(dirPath).isDirectory()) {\n        const entries = fs.readdirSync(dirPath);\n        for (const entry of entries) {\n            collectFiles({\n                dirPath: `${dirPath}/${entry}`,\n                excludes,\n                extensions,\n                collectedFiles,\n            });\n        }\n    }\n    else if (fs.existsSync(dirPath) &&\n        fs.lstatSync(dirPath).isFile() &&\n        extensions.some((ext) => dirPath.endsWith(ext))) {\n        collectedFiles.push(dirPath);\n    }\n}\n/**\n * Reads the header lines from a file until the stopping criteria is met.\n * Trims each line and skips empty lines. If a shebang (#!) is present at the top,\n * the header check starts from the next line.\n *\n * @param {string} filePath - Path to the file to read.\n * @param {string} stoppingCriteria - Regex string to determine where to stop reading.\n * @returns {string[]} Array of trimmed header lines.\n */\nfunction readHeaderLines(filePath, stoppingCriteria) {\n    const headerLines = [];\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        const lines = data.split('\\n');\n        let startIdx = 0;\n        // Skip shebang if present\n        if (lines[0] && lines[0].startsWith('#!')) {\n            startIdx = 1;\n        }\n        const stopPattern = new RegExp(`(.*|\\n)${stoppingCriteria}`, 'ig');\n        for (let i = startIdx; i < lines.length; i++) {\n            const trimmed = lines[i].trim();\n            if (!trimmed)\n                continue;\n            if (stopPattern.test(trimmed))\n                break;\n            headerLines.push(trimmed);\n        }\n    }\n    catch (err) {\n        console.error(err);\n    }\n    return headerLines;\n}\n/**\n * Checks if the license header lines are present in the file header.\n * The check is order-sensitive and expects the header block to be contiguous.\n *\n * @param {string[]} fileHeaderLines - Lines from the file header.\n * @param {string[]} licenseHeaderLines - Expected license header lines.\n * @returns {boolean} True if license header is present, false otherwise.\n */\nfunction hasLicenseHeader(fileHeaderLines, licenseHeaderLines) {\n    for (let i = 0; i < licenseHeaderLines.length - 1; i++) {\n        if (!fileHeaderLines[i + 1] || fileHeaderLines[i + 1].indexOf(licenseHeaderLines[i]) === -1) {\n            return false;\n        }\n    }\n    return true;\n}\n/**\n * Checks if the copyright line is present in the file header.\n *\n * @param {string[]} fileHeaderLines - Lines from the file header.\n * @param {string} copyright - Copyright string to search for.\n * @returns {boolean} True if copyright line is present, false otherwise.\n */\nfunction hasCopyrightLine(fileHeaderLines, copyright) {\n    return fileHeaderLines.some((line) => line.match(/^[\\s#*]+Copyright(.*)/gi) && line.includes(copyright));\n}\n/**\n * Main function to check license and copyright headers in files.\n *\n * This function will recursively search for files, read their headers, and check for the presence\n * of the required license and copyright information. It prints results to the console and returns\n * a boolean indicating whether all files passed the check.\n *\n * @param {Object} params\n * @param {string} params.author - Author name for the copyright.\n * @param {string} params.year - Year for the copyright.\n * @param {string} params.paths - Comma-separated list of paths to check.\n * @param {string[]} params.excludes - List of paths to exclude from search.\n * @param {string[]} params.extensions - List of file extensions to include.\n * @param {string} [params.stoppingCriteria] - Optional stopping criteria for header reading.\n * @returns {boolean} True if all files have correct headers, false otherwise.\n */\nfunction checkLicenseAndCopyright({ author, year, paths, excludes, extensions, stoppingCriteria = DEFAULT_STOPPING_CRITERIA, }) {\n    console.log(`${AnsiColorEnum_1.default.CYAN}\\n\\n${INITIAL_MESSAGE}${AnsiColorEnum_1.default.RESET}\\n\\n`);\n    if (!paths || !year || !author || !extensions) {\n        console.error(`${AnsiColorEnum_1.default.RED}${MISSING_PARAMS_MESSAGE}${AnsiColorEnum_1.default.RESET}`);\n        process.exit(1);\n    }\n    // Prepare copyright and license header for matching\n    const copyright = `Copyright ${year} ${author}`;\n    const licenseHeader = LICENSE_HEADER_TEMPLATE.replace(/{year}/gi, year).replace(/{author}/gi, author);\n    const licenseHeaderLines = licenseHeader.trim().split('\\n');\n    const pathList = paths.split(',');\n    let allFilesHaveHeaders = true;\n    // Iterate through all files in all specified paths\n    for (const basePath of pathList) {\n        const files = [];\n        collectFiles({ dirPath: basePath, excludes, extensions, collectedFiles: files });\n        for (const file of files) {\n            const headerLines = readHeaderLines(file, stoppingCriteria);\n            const hasCopyright = hasCopyrightLine(headerLines, copyright);\n            const hasLicense = hasLicenseHeader(headerLines, licenseHeaderLines);\n            let copyrightMsg = '';\n            let licenseMsg = '';\n            if (!hasCopyright) {\n                copyrightMsg = ` Copyright:${AnsiColorEnum_1.default.RESET} ${AnsiColorEnum_1.default.YELLOW}${NOT_PRESENT_MESSAGE}${AnsiColorEnum_1.default.RESET}`;\n            }\n            if (!hasLicense) {\n                licenseMsg = ` License:${AnsiColorEnum_1.default.RESET} ${AnsiColorEnum_1.default.YELLOW}${NOT_PRESENT_MESSAGE}${AnsiColorEnum_1.default.RESET}`;\n            }\n            allFilesHaveHeaders = allFilesHaveHeaders && hasCopyright && hasLicense;\n            if (!hasLicense || !hasCopyright) {\n                const output = `${AnsiColorEnum_1.default.BOLD}${AnsiColorEnum_1.default.LIGHTBLUE}${file}${AnsiColorEnum_1.default.RESET}${copyrightMsg} ${licenseMsg}`;\n                console.log(output);\n            }\n        }\n    }\n    // Print summary and return result\n    if (allFilesHaveHeaders) {\n        console.info(`${AnsiColorEnum_1.default.GREEN}\\n\\n${SUCCESS_MESSAGE}.${AnsiColorEnum_1.default.RESET}\\n\\n`);\n        return true;\n    }\n    else {\n        console.error(`${AnsiColorEnum_1.default.RED}\\n\\n${FAILURE_MESSAGE}${AnsiColorEnum_1.default.RESET}\\n\\n`);\n        return false;\n    }\n}\n","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.unescape = exports.escape = exports.AST = exports.Minimatch = exports.match = exports.makeRe = exports.braceExpand = exports.defaults = exports.filter = exports.GLOBSTAR = exports.sep = exports.minimatch = void 0;\nconst brace_expansion_1 = __importDefault(require(\"brace-expansion\"));\nconst assert_valid_pattern_js_1 = require(\"./assert-valid-pattern.js\");\nconst ast_js_1 = require(\"./ast.js\");\nconst escape_js_1 = require(\"./escape.js\");\nconst unescape_js_1 = require(\"./unescape.js\");\nconst minimatch = (p, pattern, options = {}) => {\n    (0, assert_valid_pattern_js_1.assertValidPattern)(pattern);\n    // shortcut: comments match nothing.\n    if (!options.nocomment && pattern.charAt(0) === '#') {\n        return false;\n    }\n    return new Minimatch(pattern, options).match(p);\n};\nexports.minimatch = minimatch;\n// Optimized checking for the most common glob patterns.\nconst starDotExtRE = /^\\*+([^+@!?\\*\\[\\(]*)$/;\nconst starDotExtTest = (ext) => (f) => !f.startsWith('.') && f.endsWith(ext);\nconst starDotExtTestDot = (ext) => (f) => f.endsWith(ext);\nconst starDotExtTestNocase = (ext) => {\n    ext = ext.toLowerCase();\n    return (f) => !f.startsWith('.') && f.toLowerCase().endsWith(ext);\n};\nconst starDotExtTestNocaseDot = (ext) => {\n    ext = ext.toLowerCase();\n    return (f) => f.toLowerCase().endsWith(ext);\n};\nconst starDotStarRE = /^\\*+\\.\\*+$/;\nconst starDotStarTest = (f) => !f.startsWith('.') && f.includes('.');\nconst starDotStarTestDot = (f) => f !== '.' && f !== '..' && f.includes('.');\nconst dotStarRE = /^\\.\\*+$/;\nconst dotStarTest = (f) => f !== '.' && f !== '..' && f.startsWith('.');\nconst starRE = /^\\*+$/;\nconst starTest = (f) => f.length !== 0 && !f.startsWith('.');\nconst starTestDot = (f) => f.length !== 0 && f !== '.' && f !== '..';\nconst qmarksRE = /^\\?+([^+@!?\\*\\[\\(]*)?$/;\nconst qmarksTestNocase = ([$0, ext = '']) => {\n    const noext = qmarksTestNoExt([$0]);\n    if (!ext)\n        return noext;\n    ext = ext.toLowerCase();\n    return (f) => noext(f) && f.toLowerCase().endsWith(ext);\n};\nconst qmarksTestNocaseDot = ([$0, ext = '']) => {\n    const noext = qmarksTestNoExtDot([$0]);\n    if (!ext)\n        return noext;\n    ext = ext.toLowerCase();\n    return (f) => noext(f) && f.toLowerCase().endsWith(ext);\n};\nconst qmarksTestDot = ([$0, ext = '']) => {\n    const noext = qmarksTestNoExtDot([$0]);\n    return !ext ? noext : (f) => noext(f) && f.endsWith(ext);\n};\nconst qmarksTest = ([$0, ext = '']) => {\n    const noext = qmarksTestNoExt([$0]);\n    return !ext ? noext : (f) => noext(f) && f.endsWith(ext);\n};\nconst qmarksTestNoExt = ([$0]) => {\n    const len = $0.length;\n    return (f) => f.length === len && !f.startsWith('.');\n};\nconst qmarksTestNoExtDot = ([$0]) => {\n    const len = $0.length;\n    return (f) => f.length === len && f !== '.' && f !== '..';\n};\n/* c8 ignore start */\nconst defaultPlatform = (typeof process === 'object' && process\n    ? (typeof process.env === 'object' &&\n        process.env &&\n        process.env.__MINIMATCH_TESTING_PLATFORM__) ||\n        process.platform\n    : 'posix');\nconst path = {\n    win32: { sep: '\\\\' },\n    posix: { sep: '/' },\n};\n/* c8 ignore stop */\nexports.sep = defaultPlatform === 'win32' ? path.win32.sep : path.posix.sep;\nexports.minimatch.sep = exports.sep;\nexports.GLOBSTAR = Symbol('globstar **');\nexports.minimatch.GLOBSTAR = exports.GLOBSTAR;\n// any single thing other than /\n// don't need to escape / when using new RegExp()\nconst qmark = '[^/]';\n// * => any number of characters\nconst star = qmark + '*?';\n// ** when dots are allowed.  Anything goes, except .. and .\n// not (^ or / followed by one or two dots followed by $ or /),\n// followed by anything, any number of times.\nconst twoStarDot = '(?:(?!(?:\\\\/|^)(?:\\\\.{1,2})($|\\\\/)).)*?';\n// not a ^ or / followed by a dot,\n// followed by anything, any number of times.\nconst twoStarNoDot = '(?:(?!(?:\\\\/|^)\\\\.).)*?';\nconst filter = (pattern, options = {}) => (p) => (0, exports.minimatch)(p, pattern, options);\nexports.filter = filter;\nexports.minimatch.filter = exports.filter;\nconst ext = (a, b = {}) => Object.assign({}, a, b);\nconst defaults = (def) => {\n    if (!def || typeof def !== 'object' || !Object.keys(def).length) {\n        return exports.minimatch;\n    }\n    const orig = exports.minimatch;\n    const m = (p, pattern, options = {}) => orig(p, pattern, ext(def, options));\n    return Object.assign(m, {\n        Minimatch: class Minimatch extends orig.Minimatch {\n            constructor(pattern, options = {}) {\n                super(pattern, ext(def, options));\n            }\n            static defaults(options) {\n                return orig.defaults(ext(def, options)).Minimatch;\n            }\n        },\n        AST: class AST extends orig.AST {\n            /* c8 ignore start */\n            constructor(type, parent, options = {}) {\n                super(type, parent, ext(def, options));\n            }\n            /* c8 ignore stop */\n            static fromGlob(pattern, options = {}) {\n                return orig.AST.fromGlob(pattern, ext(def, options));\n            }\n        },\n        unescape: (s, options = {}) => orig.unescape(s, ext(def, options)),\n        escape: (s, options = {}) => orig.escape(s, ext(def, options)),\n        filter: (pattern, options = {}) => orig.filter(pattern, ext(def, options)),\n        defaults: (options) => orig.defaults(ext(def, options)),\n        makeRe: (pattern, options = {}) => orig.makeRe(pattern, ext(def, options)),\n        braceExpand: (pattern, options = {}) => orig.braceExpand(pattern, ext(def, options)),\n        match: (list, pattern, options = {}) => orig.match(list, pattern, ext(def, options)),\n        sep: orig.sep,\n        GLOBSTAR: exports.GLOBSTAR,\n    });\n};\nexports.defaults = defaults;\nexports.minimatch.defaults = exports.defaults;\n// Brace expansion:\n// a{b,c}d -> abd acd\n// a{b,}c -> abc ac\n// a{0..3}d -> a0d a1d a2d a3d\n// a{b,c{d,e}f}g -> abg acdfg acefg\n// a{b,c}d{e,f}g -> abdeg acdeg abdeg abdfg\n//\n// Invalid sets are not expanded.\n// a{2..}b -> a{2..}b\n// a{b}c -> a{b}c\nconst braceExpand = (pattern, options = {}) => {\n    (0, assert_valid_pattern_js_1.assertValidPattern)(pattern);\n    // Thanks to Yeting Li <https://github.com/yetingli> for\n    // improving this regexp to avoid a ReDOS vulnerability.\n    if (options.nobrace || !/\\{(?:(?!\\{).)*\\}/.test(pattern)) {\n        // shortcut. no need to expand.\n        return [pattern];\n    }\n    return (0, brace_expansion_1.default)(pattern);\n};\nexports.braceExpand = braceExpand;\nexports.minimatch.braceExpand = exports.braceExpand;\n// parse a component of the expanded set.\n// At this point, no pattern may contain \"/\" in it\n// so we're going to return a 2d array, where each entry is the full\n// pattern, split on '/', and then turned into a regular expression.\n// A regexp is made at the end which joins each array with an\n// escaped /, and another full one which joins each regexp with |.\n//\n// Following the lead of Bash 4.1, note that \"**\" only has special meaning\n// when it is the *only* thing in a path portion.  Otherwise, any series\n// of * is equivalent to a single *.  Globstar behavior is enabled by\n// default, and can be disabled by setting options.noglobstar.\nconst makeRe = (pattern, options = {}) => new Minimatch(pattern, options).makeRe();\nexports.makeRe = makeRe;\nexports.minimatch.makeRe = exports.makeRe;\nconst match = (list, pattern, options = {}) => {\n    const mm = new Minimatch(pattern, options);\n    list = list.filter(f => mm.match(f));\n    if (mm.options.nonull && !list.length) {\n        list.push(pattern);\n    }\n    return list;\n};\nexports.match = match;\nexports.minimatch.match = exports.match;\n// replace stuff like \\* with *\nconst globMagic = /[?*]|[+@!]\\(.*?\\)|\\[|\\]/;\nconst regExpEscape = (s) => s.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&');\nclass Minimatch {\n    options;\n    set;\n    pattern;\n    windowsPathsNoEscape;\n    nonegate;\n    negate;\n    comment;\n    empty;\n    preserveMultipleSlashes;\n    partial;\n    globSet;\n    globParts;\n    nocase;\n    isWindows;\n    platform;\n    windowsNoMagicRoot;\n    regexp;\n    constructor(pattern, options = {}) {\n        (0, assert_valid_pattern_js_1.assertValidPattern)(pattern);\n        options = options || {};\n        this.options = options;\n        this.pattern = pattern;\n        this.platform = options.platform || defaultPlatform;\n        this.isWindows = this.platform === 'win32';\n        this.windowsPathsNoEscape =\n            !!options.windowsPathsNoEscape || options.allowWindowsEscape === false;\n        if (this.windowsPathsNoEscape) {\n            this.pattern = this.pattern.replace(/\\\\/g, '/');\n        }\n        this.preserveMultipleSlashes = !!options.preserveMultipleSlashes;\n        this.regexp = null;\n        this.negate = false;\n        this.nonegate = !!options.nonegate;\n        this.comment = false;\n        this.empty = false;\n        this.partial = !!options.partial;\n        this.nocase = !!this.options.nocase;\n        this.windowsNoMagicRoot =\n            options.windowsNoMagicRoot !== undefined\n                ? options.windowsNoMagicRoot\n                : !!(this.isWindows && this.nocase);\n        this.globSet = [];\n        this.globParts = [];\n        this.set = [];\n        // make the set of regexps etc.\n        this.make();\n    }\n    hasMagic() {\n        if (this.options.magicalBraces && this.set.length > 1) {\n            return true;\n        }\n        for (const pattern of this.set) {\n            for (const part of pattern) {\n                if (typeof part !== 'string')\n                    return true;\n            }\n        }\n        return false;\n    }\n    debug(..._) { }\n    make() {\n        const pattern = this.pattern;\n        const options = this.options;\n        // empty patterns and comments match nothing.\n        if (!options.nocomment && pattern.charAt(0) === '#') {\n            this.comment = true;\n            return;\n        }\n        if (!pattern) {\n            this.empty = true;\n            return;\n        }\n        // step 1: figure out negation, etc.\n        this.parseNegate();\n        // step 2: expand braces\n        this.globSet = [...new Set(this.braceExpand())];\n        if (options.debug) {\n            this.debug = (...args) => console.error(...args);\n        }\n        this.debug(this.pattern, this.globSet);\n        // step 3: now we have a set, so turn each one into a series of\n        // path-portion matching patterns.\n        // These will be regexps, except in the case of \"**\", which is\n        // set to the GLOBSTAR object for globstar behavior,\n        // and will not contain any / characters\n        //\n        // First, we preprocess to make the glob pattern sets a bit simpler\n        // and deduped.  There are some perf-killing patterns that can cause\n        // problems with a glob walk, but we can simplify them down a bit.\n        const rawGlobParts = this.globSet.map(s => this.slashSplit(s));\n        this.globParts = this.preprocess(rawGlobParts);\n        this.debug(this.pattern, this.globParts);\n        // glob --> regexps\n        let set = this.globParts.map((s, _, __) => {\n            if (this.isWindows && this.windowsNoMagicRoot) {\n                // check if it's a drive or unc path.\n                const isUNC = s[0] === '' &&\n                    s[1] === '' &&\n                    (s[2] === '?' || !globMagic.test(s[2])) &&\n                    !globMagic.test(s[3]);\n                const isDrive = /^[a-z]:/i.test(s[0]);\n                if (isUNC) {\n                    return [...s.slice(0, 4), ...s.slice(4).map(ss => this.parse(ss))];\n                }\n                else if (isDrive) {\n                    return [s[0], ...s.slice(1).map(ss => this.parse(ss))];\n                }\n            }\n            return s.map(ss => this.parse(ss));\n        });\n        this.debug(this.pattern, set);\n        // filter out everything that didn't compile properly.\n        this.set = set.filter(s => s.indexOf(false) === -1);\n        // do not treat the ? in UNC paths as magic\n        if (this.isWindows) {\n            for (let i = 0; i < this.set.length; i++) {\n                const p = this.set[i];\n                if (p[0] === '' &&\n                    p[1] === '' &&\n                    this.globParts[i][2] === '?' &&\n                    typeof p[3] === 'string' &&\n                    /^[a-z]:$/i.test(p[3])) {\n                    p[2] = '?';\n                }\n            }\n        }\n        this.debug(this.pattern, this.set);\n    }\n    // various transforms to equivalent pattern sets that are\n    // faster to process in a filesystem walk.  The goal is to\n    // eliminate what we can, and push all ** patterns as far\n    // to the right as possible, even if it increases the number\n    // of patterns that we have to process.\n    preprocess(globParts) {\n        // if we're not in globstar mode, then turn all ** into *\n        if (this.options.noglobstar) {\n            for (let i = 0; i < globParts.length; i++) {\n                for (let j = 0; j < globParts[i].length; j++) {\n                    if (globParts[i][j] === '**') {\n                        globParts[i][j] = '*';\n                    }\n                }\n            }\n        }\n        const { optimizationLevel = 1 } = this.options;\n        if (optimizationLevel >= 2) {\n            // aggressive optimization for the purpose of fs walking\n            globParts = this.firstPhasePreProcess(globParts);\n            globParts = this.secondPhasePreProcess(globParts);\n        }\n        else if (optimizationLevel >= 1) {\n            // just basic optimizations to remove some .. parts\n            globParts = this.levelOneOptimize(globParts);\n        }\n        else {\n            // just collapse multiple ** portions into one\n            globParts = this.adjascentGlobstarOptimize(globParts);\n        }\n        return globParts;\n    }\n    // just get rid of adjascent ** portions\n    adjascentGlobstarOptimize(globParts) {\n        return globParts.map(parts => {\n            let gs = -1;\n            while (-1 !== (gs = parts.indexOf('**', gs + 1))) {\n                let i = gs;\n                while (parts[i + 1] === '**') {\n                    i++;\n                }\n                if (i !== gs) {\n                    parts.splice(gs, i - gs);\n                }\n            }\n            return parts;\n        });\n    }\n    // get rid of adjascent ** and resolve .. portions\n    levelOneOptimize(globParts) {\n        return globParts.map(parts => {\n            parts = parts.reduce((set, part) => {\n                const prev = set[set.length - 1];\n                if (part === '**' && prev === '**') {\n                    return set;\n                }\n                if (part === '..') {\n                    if (prev && prev !== '..' && prev !== '.' && prev !== '**') {\n                        set.pop();\n                        return set;\n                    }\n                }\n                set.push(part);\n                return set;\n            }, []);\n            return parts.length === 0 ? [''] : parts;\n        });\n    }\n    levelTwoFileOptimize(parts) {\n        if (!Array.isArray(parts)) {\n            parts = this.slashSplit(parts);\n        }\n        let didSomething = false;\n        do {\n            didSomething = false;\n            // <pre>/<e>/<rest> -> <pre>/<rest>\n            if (!this.preserveMultipleSlashes) {\n                for (let i = 1; i < parts.length - 1; i++) {\n                    const p = parts[i];\n                    // don't squeeze out UNC patterns\n                    if (i === 1 && p === '' && parts[0] === '')\n                        continue;\n                    if (p === '.' || p === '') {\n                        didSomething = true;\n                        parts.splice(i, 1);\n                        i--;\n                    }\n                }\n                if (parts[0] === '.' &&\n                    parts.length === 2 &&\n                    (parts[1] === '.' || parts[1] === '')) {\n                    didSomething = true;\n                    parts.pop();\n                }\n            }\n            // <pre>/<p>/../<rest> -> <pre>/<rest>\n            let dd = 0;\n            while (-1 !== (dd = parts.indexOf('..', dd + 1))) {\n                const p = parts[dd - 1];\n                if (p && p !== '.' && p !== '..' && p !== '**') {\n                    didSomething = true;\n                    parts.splice(dd - 1, 2);\n                    dd -= 2;\n                }\n            }\n        } while (didSomething);\n        return parts.length === 0 ? [''] : parts;\n    }\n    // First phase: single-pattern processing\n    // <pre> is 1 or more portions\n    // <rest> is 1 or more portions\n    // <p> is any portion other than ., .., '', or **\n    // <e> is . or ''\n    //\n    // **/.. is *brutal* for filesystem walking performance, because\n    // it effectively resets the recursive walk each time it occurs,\n    // and ** cannot be reduced out by a .. pattern part like a regexp\n    // or most strings (other than .., ., and '') can be.\n    //\n    // <pre>/**/../<p>/<p>/<rest> -> {<pre>/../<p>/<p>/<rest>,<pre>/**/<p>/<p>/<rest>}\n    // <pre>/<e>/<rest> -> <pre>/<rest>\n    // <pre>/<p>/../<rest> -> <pre>/<rest>\n    // **/**/<rest> -> **/<rest>\n    //\n    // **/*/<rest> -> */**/<rest> <== not valid because ** doesn't follow\n    // this WOULD be allowed if ** did follow symlinks, or * didn't\n    firstPhasePreProcess(globParts) {\n        let didSomething = false;\n        do {\n            didSomething = false;\n            // <pre>/**/../<p>/<p>/<rest> -> {<pre>/../<p>/<p>/<rest>,<pre>/**/<p>/<p>/<rest>}\n            for (let parts of globParts) {\n                let gs = -1;\n                while (-1 !== (gs = parts.indexOf('**', gs + 1))) {\n                    let gss = gs;\n                    while (parts[gss + 1] === '**') {\n                        // <pre>/**/**/<rest> -> <pre>/**/<rest>\n                        gss++;\n                    }\n                    // eg, if gs is 2 and gss is 4, that means we have 3 **\n                    // parts, and can remove 2 of them.\n                    if (gss > gs) {\n                        parts.splice(gs + 1, gss - gs);\n                    }\n                    let next = parts[gs + 1];\n                    const p = parts[gs + 2];\n                    const p2 = parts[gs + 3];\n                    if (next !== '..')\n                        continue;\n                    if (!p ||\n                        p === '.' ||\n                        p === '..' ||\n                        !p2 ||\n                        p2 === '.' ||\n                        p2 === '..') {\n                        continue;\n                    }\n                    didSomething = true;\n                    // edit parts in place, and push the new one\n                    parts.splice(gs, 1);\n                    const other = parts.slice(0);\n                    other[gs] = '**';\n                    globParts.push(other);\n                    gs--;\n                }\n                // <pre>/<e>/<rest> -> <pre>/<rest>\n                if (!this.preserveMultipleSlashes) {\n                    for (let i = 1; i < parts.length - 1; i++) {\n                        const p = parts[i];\n                        // don't squeeze out UNC patterns\n                        if (i === 1 && p === '' && parts[0] === '')\n                            continue;\n                        if (p === '.' || p === '') {\n                            didSomething = true;\n                            parts.splice(i, 1);\n                            i--;\n                        }\n                    }\n                    if (parts[0] === '.' &&\n                        parts.length === 2 &&\n                        (parts[1] === '.' || parts[1] === '')) {\n                        didSomething = true;\n                        parts.pop();\n                    }\n                }\n                // <pre>/<p>/../<rest> -> <pre>/<rest>\n                let dd = 0;\n                while (-1 !== (dd = parts.indexOf('..', dd + 1))) {\n                    const p = parts[dd - 1];\n                    if (p && p !== '.' && p !== '..' && p !== '**') {\n                        didSomething = true;\n                        const needDot = dd === 1 && parts[dd + 1] === '**';\n                        const splin = needDot ? ['.'] : [];\n                        parts.splice(dd - 1, 2, ...splin);\n                        if (parts.length === 0)\n                            parts.push('');\n                        dd -= 2;\n                    }\n                }\n            }\n        } while (didSomething);\n        return globParts;\n    }\n    // second phase: multi-pattern dedupes\n    // {<pre>/*/<rest>,<pre>/<p>/<rest>} -> <pre>/*/<rest>\n    // {<pre>/<rest>,<pre>/<rest>} -> <pre>/<rest>\n    // {<pre>/**/<rest>,<pre>/<rest>} -> <pre>/**/<rest>\n    //\n    // {<pre>/**/<rest>,<pre>/**/<p>/<rest>} -> <pre>/**/<rest>\n    // ^-- not valid because ** doens't follow symlinks\n    secondPhasePreProcess(globParts) {\n        for (let i = 0; i < globParts.length - 1; i++) {\n            for (let j = i + 1; j < globParts.length; j++) {\n                const matched = this.partsMatch(globParts[i], globParts[j], !this.preserveMultipleSlashes);\n                if (matched) {\n                    globParts[i] = [];\n                    globParts[j] = matched;\n                    break;\n                }\n            }\n        }\n        return globParts.filter(gs => gs.length);\n    }\n    partsMatch(a, b, emptyGSMatch = false) {\n        let ai = 0;\n        let bi = 0;\n        let result = [];\n        let which = '';\n        while (ai < a.length && bi < b.length) {\n            if (a[ai] === b[bi]) {\n                result.push(which === 'b' ? b[bi] : a[ai]);\n                ai++;\n                bi++;\n            }\n            else if (emptyGSMatch && a[ai] === '**' && b[bi] === a[ai + 1]) {\n                result.push(a[ai]);\n                ai++;\n            }\n            else if (emptyGSMatch && b[bi] === '**' && a[ai] === b[bi + 1]) {\n                result.push(b[bi]);\n                bi++;\n            }\n            else if (a[ai] === '*' &&\n                b[bi] &&\n                (this.options.dot || !b[bi].startsWith('.')) &&\n                b[bi] !== '**') {\n                if (which === 'b')\n                    return false;\n                which = 'a';\n                result.push(a[ai]);\n                ai++;\n                bi++;\n            }\n            else if (b[bi] === '*' &&\n                a[ai] &&\n                (this.options.dot || !a[ai].startsWith('.')) &&\n                a[ai] !== '**') {\n                if (which === 'a')\n                    return false;\n                which = 'b';\n                result.push(b[bi]);\n                ai++;\n                bi++;\n            }\n            else {\n                return false;\n            }\n        }\n        // if we fall out of the loop, it means they two are identical\n        // as long as their lengths match\n        return a.length === b.length && result;\n    }\n    parseNegate() {\n        if (this.nonegate)\n            return;\n        const pattern = this.pattern;\n        let negate = false;\n        let negateOffset = 0;\n        for (let i = 0; i < pattern.length && pattern.charAt(i) === '!'; i++) {\n            negate = !negate;\n            negateOffset++;\n        }\n        if (negateOffset)\n            this.pattern = pattern.slice(negateOffset);\n        this.negate = negate;\n    }\n    // set partial to true to test if, for example,\n    // \"/a/b\" matches the start of \"/*/b/*/d\"\n    // Partial means, if you run out of file before you run\n    // out of pattern, then that's fine, as long as all\n    // the parts match.\n    matchOne(file, pattern, partial = false) {\n        const options = this.options;\n        // UNC paths like //?/X:/... can match X:/... and vice versa\n        // Drive letters in absolute drive or unc paths are always compared\n        // case-insensitively.\n        if (this.isWindows) {\n            const fileDrive = typeof file[0] === 'string' && /^[a-z]:$/i.test(file[0]);\n            const fileUNC = !fileDrive &&\n                file[0] === '' &&\n                file[1] === '' &&\n                file[2] === '?' &&\n                /^[a-z]:$/i.test(file[3]);\n            const patternDrive = typeof pattern[0] === 'string' && /^[a-z]:$/i.test(pattern[0]);\n            const patternUNC = !patternDrive &&\n                pattern[0] === '' &&\n                pattern[1] === '' &&\n                pattern[2] === '?' &&\n                typeof pattern[3] === 'string' &&\n                /^[a-z]:$/i.test(pattern[3]);\n            const fdi = fileUNC ? 3 : fileDrive ? 0 : undefined;\n            const pdi = patternUNC ? 3 : patternDrive ? 0 : undefined;\n            if (typeof fdi === 'number' && typeof pdi === 'number') {\n                const [fd, pd] = [file[fdi], pattern[pdi]];\n                if (fd.toLowerCase() === pd.toLowerCase()) {\n                    pattern[pdi] = fd;\n                    if (pdi > fdi) {\n                        pattern = pattern.slice(pdi);\n                    }\n                    else if (fdi > pdi) {\n                        file = file.slice(fdi);\n                    }\n                }\n            }\n        }\n        // resolve and reduce . and .. portions in the file as well.\n        // dont' need to do the second phase, because it's only one string[]\n        const { optimizationLevel = 1 } = this.options;\n        if (optimizationLevel >= 2) {\n            file = this.levelTwoFileOptimize(file);\n        }\n        this.debug('matchOne', this, { file, pattern });\n        this.debug('matchOne', file.length, pattern.length);\n        for (var fi = 0, pi = 0, fl = file.length, pl = pattern.length; fi < fl && pi < pl; fi++, pi++) {\n            this.debug('matchOne loop');\n            var p = pattern[pi];\n            var f = file[fi];\n            this.debug(pattern, p, f);\n            // should be impossible.\n            // some invalid regexp stuff in the set.\n            /* c8 ignore start */\n            if (p === false) {\n                return false;\n            }\n            /* c8 ignore stop */\n            if (p === exports.GLOBSTAR) {\n                this.debug('GLOBSTAR', [pattern, p, f]);\n                // \"**\"\n                // a/**/b/**/c would match the following:\n                // a/b/x/y/z/c\n                // a/x/y/z/b/c\n                // a/b/x/b/x/c\n                // a/b/c\n                // To do this, take the rest of the pattern after\n                // the **, and see if it would match the file remainder.\n                // If so, return success.\n                // If not, the ** \"swallows\" a segment, and try again.\n                // This is recursively awful.\n                //\n                // a/**/b/**/c matching a/b/x/y/z/c\n                // - a matches a\n                // - doublestar\n                //   - matchOne(b/x/y/z/c, b/**/c)\n                //     - b matches b\n                //     - doublestar\n                //       - matchOne(x/y/z/c, c) -> no\n                //       - matchOne(y/z/c, c) -> no\n                //       - matchOne(z/c, c) -> no\n                //       - matchOne(c, c) yes, hit\n                var fr = fi;\n                var pr = pi + 1;\n                if (pr === pl) {\n                    this.debug('** at the end');\n                    // a ** at the end will just swallow the rest.\n                    // We have found a match.\n                    // however, it will not swallow /.x, unless\n                    // options.dot is set.\n                    // . and .. are *never* matched by **, for explosively\n                    // exponential reasons.\n                    for (; fi < fl; fi++) {\n                        if (file[fi] === '.' ||\n                            file[fi] === '..' ||\n                            (!options.dot && file[fi].charAt(0) === '.'))\n                            return false;\n                    }\n                    return true;\n                }\n                // ok, let's see if we can swallow whatever we can.\n                while (fr < fl) {\n                    var swallowee = file[fr];\n                    this.debug('\\nglobstar while', file, fr, pattern, pr, swallowee);\n                    // XXX remove this slice.  Just pass the start index.\n                    if (this.matchOne(file.slice(fr), pattern.slice(pr), partial)) {\n                        this.debug('globstar found match!', fr, fl, swallowee);\n                        // found a match.\n                        return true;\n                    }\n                    else {\n                        // can't swallow \".\" or \"..\" ever.\n                        // can only swallow \".foo\" when explicitly asked.\n                        if (swallowee === '.' ||\n                            swallowee === '..' ||\n                            (!options.dot && swallowee.charAt(0) === '.')) {\n                            this.debug('dot detected!', file, fr, pattern, pr);\n                            break;\n                        }\n                        // ** swallows a segment, and continue.\n                        this.debug('globstar swallow a segment, and continue');\n                        fr++;\n                    }\n                }\n                // no match was found.\n                // However, in partial mode, we can't say this is necessarily over.\n                /* c8 ignore start */\n                if (partial) {\n                    // ran out of file\n                    this.debug('\\n>>> no match, partial?', file, fr, pattern, pr);\n                    if (fr === fl) {\n                        return true;\n                    }\n                }\n                /* c8 ignore stop */\n                return false;\n            }\n            // something other than **\n            // non-magic patterns just have to match exactly\n            // patterns with magic have been turned into regexps.\n            let hit;\n            if (typeof p === 'string') {\n                hit = f === p;\n                this.debug('string match', p, f, hit);\n            }\n            else {\n                hit = p.test(f);\n                this.debug('pattern match', p, f, hit);\n            }\n            if (!hit)\n                return false;\n        }\n        // Note: ending in / means that we'll get a final \"\"\n        // at the end of the pattern.  This can only match a\n        // corresponding \"\" at the end of the file.\n        // If the file ends in /, then it can only match a\n        // a pattern that ends in /, unless the pattern just\n        // doesn't have any more for it. But, a/b/ should *not*\n        // match \"a/b/*\", even though \"\" matches against the\n        // [^/]*? pattern, except in partial mode, where it might\n        // simply not be reached yet.\n        // However, a/b/ should still satisfy a/*\n        // now either we fell off the end of the pattern, or we're done.\n        if (fi === fl && pi === pl) {\n            // ran out of pattern and filename at the same time.\n            // an exact hit!\n            return true;\n        }\n        else if (fi === fl) {\n            // ran out of file, but still had pattern left.\n            // this is ok if we're doing the match as part of\n            // a glob fs traversal.\n            return partial;\n        }\n        else if (pi === pl) {\n            // ran out of pattern, still have file left.\n            // this is only acceptable if we're on the very last\n            // empty segment of a file with a trailing slash.\n            // a/* should match a/b/\n            return fi === fl - 1 && file[fi] === '';\n            /* c8 ignore start */\n        }\n        else {\n            // should be unreachable.\n            throw new Error('wtf?');\n        }\n        /* c8 ignore stop */\n    }\n    braceExpand() {\n        return (0, exports.braceExpand)(this.pattern, this.options);\n    }\n    parse(pattern) {\n        (0, assert_valid_pattern_js_1.assertValidPattern)(pattern);\n        const options = this.options;\n        // shortcuts\n        if (pattern === '**')\n            return exports.GLOBSTAR;\n        if (pattern === '')\n            return '';\n        // far and away, the most common glob pattern parts are\n        // *, *.*, and *.<ext>  Add a fast check method for those.\n        let m;\n        let fastTest = null;\n        if ((m = pattern.match(starRE))) {\n            fastTest = options.dot ? starTestDot : starTest;\n        }\n        else if ((m = pattern.match(starDotExtRE))) {\n            fastTest = (options.nocase\n                ? options.dot\n                    ? starDotExtTestNocaseDot\n                    : starDotExtTestNocase\n                : options.dot\n                    ? starDotExtTestDot\n                    : starDotExtTest)(m[1]);\n        }\n        else if ((m = pattern.match(qmarksRE))) {\n            fastTest = (options.nocase\n                ? options.dot\n                    ? qmarksTestNocaseDot\n                    : qmarksTestNocase\n                : options.dot\n                    ? qmarksTestDot\n                    : qmarksTest)(m);\n        }\n        else if ((m = pattern.match(starDotStarRE))) {\n            fastTest = options.dot ? starDotStarTestDot : starDotStarTest;\n        }\n        else if ((m = pattern.match(dotStarRE))) {\n            fastTest = dotStarTest;\n        }\n        const re = ast_js_1.AST.fromGlob(pattern, this.options).toMMPattern();\n        if (fastTest && typeof re === 'object') {\n            // Avoids overriding in frozen environments\n            Reflect.defineProperty(re, 'test', { value: fastTest });\n        }\n        return re;\n    }\n    makeRe() {\n        if (this.regexp || this.regexp === false)\n            return this.regexp;\n        // at this point, this.set is a 2d array of partial\n        // pattern strings, or \"**\".\n        //\n        // It's better to use .match().  This function shouldn't\n        // be used, really, but it's pretty convenient sometimes,\n        // when you just want to work with a regex.\n        const set = this.set;\n        if (!set.length) {\n            this.regexp = false;\n            return this.regexp;\n        }\n        const options = this.options;\n        const twoStar = options.noglobstar\n            ? star\n            : options.dot\n                ? twoStarDot\n                : twoStarNoDot;\n        const flags = new Set(options.nocase ? ['i'] : []);\n        // regexpify non-globstar patterns\n        // if ** is only item, then we just do one twoStar\n        // if ** is first, and there are more, prepend (\\/|twoStar\\/)? to next\n        // if ** is last, append (\\/twoStar|) to previous\n        // if ** is in the middle, append (\\/|\\/twoStar\\/) to previous\n        // then filter out GLOBSTAR symbols\n        let re = set\n            .map(pattern => {\n            const pp = pattern.map(p => {\n                if (p instanceof RegExp) {\n                    for (const f of p.flags.split(''))\n                        flags.add(f);\n                }\n                return typeof p === 'string'\n                    ? regExpEscape(p)\n                    : p === exports.GLOBSTAR\n                        ? exports.GLOBSTAR\n                        : p._src;\n            });\n            pp.forEach((p, i) => {\n                const next = pp[i + 1];\n                const prev = pp[i - 1];\n                if (p !== exports.GLOBSTAR || prev === exports.GLOBSTAR) {\n                    return;\n                }\n                if (prev === undefined) {\n                    if (next !== undefined && next !== exports.GLOBSTAR) {\n                        pp[i + 1] = '(?:\\\\/|' + twoStar + '\\\\/)?' + next;\n                    }\n                    else {\n                        pp[i] = twoStar;\n                    }\n                }\n                else if (next === undefined) {\n                    pp[i - 1] = prev + '(?:\\\\/|' + twoStar + ')?';\n                }\n                else if (next !== exports.GLOBSTAR) {\n                    pp[i - 1] = prev + '(?:\\\\/|\\\\/' + twoStar + '\\\\/)' + next;\n                    pp[i + 1] = exports.GLOBSTAR;\n                }\n            });\n            return pp.filter(p => p !== exports.GLOBSTAR).join('/');\n        })\n            .join('|');\n        // need to wrap in parens if we had more than one thing with |,\n        // otherwise only the first will be anchored to ^ and the last to $\n        const [open, close] = set.length > 1 ? ['(?:', ')'] : ['', ''];\n        // must match entire pattern\n        // ending in a * or ** will make it less strict.\n        re = '^' + open + re + close + '$';\n        // can match anything, as long as it's not this.\n        if (this.negate)\n            re = '^(?!' + re + ').+$';\n        try {\n            this.regexp = new RegExp(re, [...flags].join(''));\n            /* c8 ignore start */\n        }\n        catch (ex) {\n            // should be impossible\n            this.regexp = false;\n        }\n        /* c8 ignore stop */\n        return this.regexp;\n    }\n    slashSplit(p) {\n        // if p starts with // on windows, we preserve that\n        // so that UNC paths aren't broken.  Otherwise, any number of\n        // / characters are coalesced into one, unless\n        // preserveMultipleSlashes is set to true.\n        if (this.preserveMultipleSlashes) {\n            return p.split('/');\n        }\n        else if (this.isWindows && /^\\/\\/[^\\/]+/.test(p)) {\n            // add an extra '' for the one we lose\n            return ['', ...p.split(/\\/+/)];\n        }\n        else {\n            return p.split(/\\/+/);\n        }\n    }\n    match(f, partial = this.partial) {\n        this.debug('match', f, this.pattern);\n        // short-circuit in the case of busted things.\n        // comments, etc.\n        if (this.comment) {\n            return false;\n        }\n        if (this.empty) {\n            return f === '';\n        }\n        if (f === '/' && partial) {\n            return true;\n        }\n        const options = this.options;\n        // windows: need to use /, not \\\n        if (this.isWindows) {\n            f = f.split('\\\\').join('/');\n        }\n        // treat the test path as a set of pathparts.\n        const ff = this.slashSplit(f);\n        this.debug(this.pattern, 'split', ff);\n        // just ONE of the pattern sets in this.set needs to match\n        // in order for it to be valid.  If negating, then just one\n        // match means that we have failed.\n        // Either way, return on the first hit.\n        const set = this.set;\n        this.debug(this.pattern, 'set', set);\n        // Find the basename of the path by looking for the last non-empty segment\n        let filename = ff[ff.length - 1];\n        if (!filename) {\n            for (let i = ff.length - 2; !filename && i >= 0; i--) {\n                filename = ff[i];\n            }\n        }\n        for (let i = 0; i < set.length; i++) {\n            const pattern = set[i];\n            let file = ff;\n            if (options.matchBase && pattern.length === 1) {\n                file = [filename];\n            }\n            const hit = this.matchOne(file, pattern, partial);\n            if (hit) {\n                if (options.flipNegate) {\n                    return true;\n                }\n                return !this.negate;\n            }\n        }\n        // didn't get any hits.  this is success if it's a negative\n        // pattern, failure otherwise.\n        if (options.flipNegate) {\n            return false;\n        }\n        return this.negate;\n    }\n    static defaults(def) {\n        return exports.minimatch.defaults(def).Minimatch;\n    }\n}\nexports.Minimatch = Minimatch;\n/* c8 ignore start */\nvar ast_js_2 = require(\"./ast.js\");\nObject.defineProperty(exports, \"AST\", { enumerable: true, get: function () { return ast_js_2.AST; } });\nvar escape_js_2 = require(\"./escape.js\");\nObject.defineProperty(exports, \"escape\", { enumerable: true, get: function () { return escape_js_2.escape; } });\nvar unescape_js_2 = require(\"./unescape.js\");\nObject.defineProperty(exports, \"unescape\", { enumerable: true, get: function () { return unescape_js_2.unescape; } });\n/* c8 ignore stop */\nexports.minimatch.AST = ast_js_1.AST;\nexports.minimatch.Minimatch = Minimatch;\nexports.minimatch.escape = escape_js_1.escape;\nexports.minimatch.unescape = unescape_js_1.unescape;\n//# sourceMappingURL=index.js.map","'use strict';\nmodule.exports = balanced;\nfunction balanced(a, b, str) {\n  if (a instanceof RegExp) a = maybeMatch(a, str);\n  if (b instanceof RegExp) b = maybeMatch(b, str);\n\n  var r = range(a, b, str);\n\n  return r && {\n    start: r[0],\n    end: r[1],\n    pre: str.slice(0, r[0]),\n    body: str.slice(r[0] + a.length, r[1]),\n    post: str.slice(r[1] + b.length)\n  };\n}\n\nfunction maybeMatch(reg, str) {\n  var m = str.match(reg);\n  return m ? m[0] : null;\n}\n\nbalanced.range = range;\nfunction range(a, b, str) {\n  var begs, beg, left, right, result;\n  var ai = str.indexOf(a);\n  var bi = str.indexOf(b, ai + 1);\n  var i = ai;\n\n  if (ai >= 0 && bi > 0) {\n    if(a===b) {\n      return [ai, bi];\n    }\n    begs = [];\n    left = str.length;\n\n    while (i >= 0 && !result) {\n      if (i == ai) {\n        begs.push(i);\n        ai = str.indexOf(a, i + 1);\n      } else if (begs.length == 1) {\n        result = [ begs.pop(), bi ];\n      } else {\n        beg = begs.pop();\n        if (beg < left) {\n          left = beg;\n          right = bi;\n        }\n\n        bi = str.indexOf(b, i + 1);\n      }\n\n      i = ai < bi && ai >= 0 ? ai : bi;\n    }\n\n    if (begs.length) {\n      result = [ left, right ];\n    }\n  }\n\n  return result;\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.escape = void 0;\n/**\n * Escape all magic characters in a glob pattern.\n *\n * If the {@link windowsPathsNoEscape | GlobOptions.windowsPathsNoEscape}\n * option is used, then characters are escaped by wrapping in `[]`, because\n * a magic character wrapped in a character class can only be satisfied by\n * that exact character.  In this mode, `\\` is _not_ escaped, because it is\n * not interpreted as a magic character, but instead as a path separator.\n */\nconst escape = (s, { windowsPathsNoEscape = false, } = {}) => {\n    // don't need to escape +@! because we escape the parens\n    // that make those magic, and escaping ! as [!] isn't valid,\n    // because [!]] is a valid glob class meaning not ']'.\n    return windowsPathsNoEscape\n        ? s.replace(/[?*()[\\]]/g, '[$&]')\n        : s.replace(/[?*()[\\]\\\\]/g, '\\\\$&');\n};\nexports.escape = escape;\n//# sourceMappingURL=escape.js.map","var balanced = require('balanced-match');\n\nmodule.exports = expandTop;\n\nvar escSlash = '\\0SLASH'+Math.random()+'\\0';\nvar escOpen = '\\0OPEN'+Math.random()+'\\0';\nvar escClose = '\\0CLOSE'+Math.random()+'\\0';\nvar escComma = '\\0COMMA'+Math.random()+'\\0';\nvar escPeriod = '\\0PERIOD'+Math.random()+'\\0';\n\nfunction numeric(str) {\n  return parseInt(str, 10) == str\n    ? parseInt(str, 10)\n    : str.charCodeAt(0);\n}\n\nfunction escapeBraces(str) {\n  return str.split('\\\\\\\\').join(escSlash)\n            .split('\\\\{').join(escOpen)\n            .split('\\\\}').join(escClose)\n            .split('\\\\,').join(escComma)\n            .split('\\\\.').join(escPeriod);\n}\n\nfunction unescapeBraces(str) {\n  return str.split(escSlash).join('\\\\')\n            .split(escOpen).join('{')\n            .split(escClose).join('}')\n            .split(escComma).join(',')\n            .split(escPeriod).join('.');\n}\n\n\n// Basically just str.split(\",\"), but handling cases\n// where we have nested braced sections, which should be\n// treated as individual members, like {a,{b,c},d}\nfunction parseCommaParts(str) {\n  if (!str)\n    return [''];\n\n  var parts = [];\n  var m = balanced('{', '}', str);\n\n  if (!m)\n    return str.split(',');\n\n  var pre = m.pre;\n  var body = m.body;\n  var post = m.post;\n  var p = pre.split(',');\n\n  p[p.length-1] += '{' + body + '}';\n  var postParts = parseCommaParts(post);\n  if (post.length) {\n    p[p.length-1] += postParts.shift();\n    p.push.apply(p, postParts);\n  }\n\n  parts.push.apply(parts, p);\n\n  return parts;\n}\n\nfunction expandTop(str) {\n  if (!str)\n    return [];\n\n  // I don't know why Bash 4.3 does this, but it does.\n  // Anything starting with {} will have the first two bytes preserved\n  // but *only* at the top level, so {},a}b will not expand to anything,\n  // but a{},b}c will be expanded to [a}c,abc].\n  // One could argue that this is a bug in Bash, but since the goal of\n  // this module is to match Bash's rules, we escape a leading {}\n  if (str.substr(0, 2) === '{}') {\n    str = '\\\\{\\\\}' + str.substr(2);\n  }\n\n  return expand(escapeBraces(str), true).map(unescapeBraces);\n}\n\nfunction embrace(str) {\n  return '{' + str + '}';\n}\nfunction isPadded(el) {\n  return /^-?0\\d/.test(el);\n}\n\nfunction lte(i, y) {\n  return i <= y;\n}\nfunction gte(i, y) {\n  return i >= y;\n}\n\nfunction expand(str, isTop) {\n  var expansions = [];\n\n  var m = balanced('{', '}', str);\n  if (!m) return [str];\n\n  // no need to expand pre, since it is guaranteed to be free of brace-sets\n  var pre = m.pre;\n  var post = m.post.length\n    ? expand(m.post, false)\n    : [''];\n\n  if (/\\$$/.test(m.pre)) {    \n    for (var k = 0; k < post.length; k++) {\n      var expansion = pre+ '{' + m.body + '}' + post[k];\n      expansions.push(expansion);\n    }\n  } else {\n    var isNumericSequence = /^-?\\d+\\.\\.-?\\d+(?:\\.\\.-?\\d+)?$/.test(m.body);\n    var isAlphaSequence = /^[a-zA-Z]\\.\\.[a-zA-Z](?:\\.\\.-?\\d+)?$/.test(m.body);\n    var isSequence = isNumericSequence || isAlphaSequence;\n    var isOptions = m.body.indexOf(',') >= 0;\n    if (!isSequence && !isOptions) {\n      // {a},b}\n      if (m.post.match(/,.*\\}/)) {\n        str = m.pre + '{' + m.body + escClose + m.post;\n        return expand(str);\n      }\n      return [str];\n    }\n\n    var n;\n    if (isSequence) {\n      n = m.body.split(/\\.\\./);\n    } else {\n      n = parseCommaParts(m.body);\n      if (n.length === 1) {\n        // x{{a,b}}y ==> x{a}y x{b}y\n        n = expand(n[0], false).map(embrace);\n        if (n.length === 1) {\n          return post.map(function(p) {\n            return m.pre + n[0] + p;\n          });\n        }\n      }\n    }\n\n    // at this point, n is the parts, and we know it's not a comma set\n    // with a single entry.\n    var N;\n\n    if (isSequence) {\n      var x = numeric(n[0]);\n      var y = numeric(n[1]);\n      var width = Math.max(n[0].length, n[1].length)\n      var incr = n.length == 3\n        ? Math.abs(numeric(n[2]))\n        : 1;\n      var test = lte;\n      var reverse = y < x;\n      if (reverse) {\n        incr *= -1;\n        test = gte;\n      }\n      var pad = n.some(isPadded);\n\n      N = [];\n\n      for (var i = x; test(i, y); i += incr) {\n        var c;\n        if (isAlphaSequence) {\n          c = String.fromCharCode(i);\n          if (c === '\\\\')\n            c = '';\n        } else {\n          c = String(i);\n          if (pad) {\n            var need = width - c.length;\n            if (need > 0) {\n              var z = new Array(need + 1).join('0');\n              if (i < 0)\n                c = '-' + z + c.slice(1);\n              else\n                c = z + c;\n            }\n          }\n        }\n        N.push(c);\n      }\n    } else {\n      N = [];\n\n      for (var j = 0; j < n.length; j++) {\n        N.push.apply(N, expand(n[j], false));\n      }\n    }\n\n    for (var j = 0; j < N.length; j++) {\n      for (var k = 0; k < post.length; k++) {\n        var expansion = pre + N[j] + post[k];\n        if (!isTop || isSequence || expansion)\n          expansions.push(expansion);\n      }\n    }\n  }\n\n  return expansions;\n}\n\n","\"use strict\";\n// parse a single path portion\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AST = void 0;\nconst brace_expressions_js_1 = require(\"./brace-expressions.js\");\nconst unescape_js_1 = require(\"./unescape.js\");\nconst types = new Set(['!', '?', '+', '*', '@']);\nconst isExtglobType = (c) => types.has(c);\n// Patterns that get prepended to bind to the start of either the\n// entire string, or just a single path portion, to prevent dots\n// and/or traversal patterns, when needed.\n// Exts don't need the ^ or / bit, because the root binds that already.\nconst startNoTraversal = '(?!(?:^|/)\\\\.\\\\.?(?:$|/))';\nconst startNoDot = '(?!\\\\.)';\n// characters that indicate a start of pattern needs the \"no dots\" bit,\n// because a dot *might* be matched. ( is not in the list, because in\n// the case of a child extglob, it will handle the prevention itself.\nconst addPatternStart = new Set(['[', '.']);\n// cases where traversal is A-OK, no dot prevention needed\nconst justDots = new Set(['..', '.']);\nconst reSpecials = new Set('().*{}+?[]^$\\\\!');\nconst regExpEscape = (s) => s.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&');\n// any single thing other than /\nconst qmark = '[^/]';\n// * => any number of characters\nconst star = qmark + '*?';\n// use + when we need to ensure that *something* matches, because the * is\n// the only thing in the path portion.\nconst starNoEmpty = qmark + '+?';\n// remove the \\ chars that we added if we end up doing a nonmagic compare\n// const deslash = (s: string) => s.replace(/\\\\(.)/g, '$1')\nclass AST {\n    type;\n    #root;\n    #hasMagic;\n    #uflag = false;\n    #parts = [];\n    #parent;\n    #parentIndex;\n    #negs;\n    #filledNegs = false;\n    #options;\n    #toString;\n    // set to true if it's an extglob with no children\n    // (which really means one child of '')\n    #emptyExt = false;\n    constructor(type, parent, options = {}) {\n        this.type = type;\n        // extglobs are inherently magical\n        if (type)\n            this.#hasMagic = true;\n        this.#parent = parent;\n        this.#root = this.#parent ? this.#parent.#root : this;\n        this.#options = this.#root === this ? options : this.#root.#options;\n        this.#negs = this.#root === this ? [] : this.#root.#negs;\n        if (type === '!' && !this.#root.#filledNegs)\n            this.#negs.push(this);\n        this.#parentIndex = this.#parent ? this.#parent.#parts.length : 0;\n    }\n    get hasMagic() {\n        /* c8 ignore start */\n        if (this.#hasMagic !== undefined)\n            return this.#hasMagic;\n        /* c8 ignore stop */\n        for (const p of this.#parts) {\n            if (typeof p === 'string')\n                continue;\n            if (p.type || p.hasMagic)\n                return (this.#hasMagic = true);\n        }\n        // note: will be undefined until we generate the regexp src and find out\n        return this.#hasMagic;\n    }\n    // reconstructs the pattern\n    toString() {\n        if (this.#toString !== undefined)\n            return this.#toString;\n        if (!this.type) {\n            return (this.#toString = this.#parts.map(p => String(p)).join(''));\n        }\n        else {\n            return (this.#toString =\n                this.type + '(' + this.#parts.map(p => String(p)).join('|') + ')');\n        }\n    }\n    #fillNegs() {\n        /* c8 ignore start */\n        if (this !== this.#root)\n            throw new Error('should only call on root');\n        if (this.#filledNegs)\n            return this;\n        /* c8 ignore stop */\n        // call toString() once to fill this out\n        this.toString();\n        this.#filledNegs = true;\n        let n;\n        while ((n = this.#negs.pop())) {\n            if (n.type !== '!')\n                continue;\n            // walk up the tree, appending everthing that comes AFTER parentIndex\n            let p = n;\n            let pp = p.#parent;\n            while (pp) {\n                for (let i = p.#parentIndex + 1; !pp.type && i < pp.#parts.length; i++) {\n                    for (const part of n.#parts) {\n                        /* c8 ignore start */\n                        if (typeof part === 'string') {\n                            throw new Error('string part in extglob AST??');\n                        }\n                        /* c8 ignore stop */\n                        part.copyIn(pp.#parts[i]);\n                    }\n                }\n                p = pp;\n                pp = p.#parent;\n            }\n        }\n        return this;\n    }\n    push(...parts) {\n        for (const p of parts) {\n            if (p === '')\n                continue;\n            /* c8 ignore start */\n            if (typeof p !== 'string' && !(p instanceof AST && p.#parent === this)) {\n                throw new Error('invalid part: ' + p);\n            }\n            /* c8 ignore stop */\n            this.#parts.push(p);\n        }\n    }\n    toJSON() {\n        const ret = this.type === null\n            ? this.#parts.slice().map(p => (typeof p === 'string' ? p : p.toJSON()))\n            : [this.type, ...this.#parts.map(p => p.toJSON())];\n        if (this.isStart() && !this.type)\n            ret.unshift([]);\n        if (this.isEnd() &&\n            (this === this.#root ||\n                (this.#root.#filledNegs && this.#parent?.type === '!'))) {\n            ret.push({});\n        }\n        return ret;\n    }\n    isStart() {\n        if (this.#root === this)\n            return true;\n        // if (this.type) return !!this.#parent?.isStart()\n        if (!this.#parent?.isStart())\n            return false;\n        if (this.#parentIndex === 0)\n            return true;\n        // if everything AHEAD of this is a negation, then it's still the \"start\"\n        const p = this.#parent;\n        for (let i = 0; i < this.#parentIndex; i++) {\n            const pp = p.#parts[i];\n            if (!(pp instanceof AST && pp.type === '!')) {\n                return false;\n            }\n        }\n        return true;\n    }\n    isEnd() {\n        if (this.#root === this)\n            return true;\n        if (this.#parent?.type === '!')\n            return true;\n        if (!this.#parent?.isEnd())\n            return false;\n        if (!this.type)\n            return this.#parent?.isEnd();\n        // if not root, it'll always have a parent\n        /* c8 ignore start */\n        const pl = this.#parent ? this.#parent.#parts.length : 0;\n        /* c8 ignore stop */\n        return this.#parentIndex === pl - 1;\n    }\n    copyIn(part) {\n        if (typeof part === 'string')\n            this.push(part);\n        else\n            this.push(part.clone(this));\n    }\n    clone(parent) {\n        const c = new AST(this.type, parent);\n        for (const p of this.#parts) {\n            c.copyIn(p);\n        }\n        return c;\n    }\n    static #parseAST(str, ast, pos, opt) {\n        let escaping = false;\n        let inBrace = false;\n        let braceStart = -1;\n        let braceNeg = false;\n        if (ast.type === null) {\n            // outside of a extglob, append until we find a start\n            let i = pos;\n            let acc = '';\n            while (i < str.length) {\n                const c = str.charAt(i++);\n                // still accumulate escapes at this point, but we do ignore\n                // starts that are escaped\n                if (escaping || c === '\\\\') {\n                    escaping = !escaping;\n                    acc += c;\n                    continue;\n                }\n                if (inBrace) {\n                    if (i === braceStart + 1) {\n                        if (c === '^' || c === '!') {\n                            braceNeg = true;\n                        }\n                    }\n                    else if (c === ']' && !(i === braceStart + 2 && braceNeg)) {\n                        inBrace = false;\n                    }\n                    acc += c;\n                    continue;\n                }\n                else if (c === '[') {\n                    inBrace = true;\n                    braceStart = i;\n                    braceNeg = false;\n                    acc += c;\n                    continue;\n                }\n                if (!opt.noext && isExtglobType(c) && str.charAt(i) === '(') {\n                    ast.push(acc);\n                    acc = '';\n                    const ext = new AST(c, ast);\n                    i = AST.#parseAST(str, ext, i, opt);\n                    ast.push(ext);\n                    continue;\n                }\n                acc += c;\n            }\n            ast.push(acc);\n            return i;\n        }\n        // some kind of extglob, pos is at the (\n        // find the next | or )\n        let i = pos + 1;\n        let part = new AST(null, ast);\n        const parts = [];\n        let acc = '';\n        while (i < str.length) {\n            const c = str.charAt(i++);\n            // still accumulate escapes at this point, but we do ignore\n            // starts that are escaped\n            if (escaping || c === '\\\\') {\n                escaping = !escaping;\n                acc += c;\n                continue;\n            }\n            if (inBrace) {\n                if (i === braceStart + 1) {\n                    if (c === '^' || c === '!') {\n                        braceNeg = true;\n                    }\n                }\n                else if (c === ']' && !(i === braceStart + 2 && braceNeg)) {\n                    inBrace = false;\n                }\n                acc += c;\n                continue;\n            }\n            else if (c === '[') {\n                inBrace = true;\n                braceStart = i;\n                braceNeg = false;\n                acc += c;\n                continue;\n            }\n            if (isExtglobType(c) && str.charAt(i) === '(') {\n                part.push(acc);\n                acc = '';\n                const ext = new AST(c, part);\n                part.push(ext);\n                i = AST.#parseAST(str, ext, i, opt);\n                continue;\n            }\n            if (c === '|') {\n                part.push(acc);\n                acc = '';\n                parts.push(part);\n                part = new AST(null, ast);\n                continue;\n            }\n            if (c === ')') {\n                if (acc === '' && ast.#parts.length === 0) {\n                    ast.#emptyExt = true;\n                }\n                part.push(acc);\n                acc = '';\n                ast.push(...parts, part);\n                return i;\n            }\n            acc += c;\n        }\n        // unfinished extglob\n        // if we got here, it was a malformed extglob! not an extglob, but\n        // maybe something else in there.\n        ast.type = null;\n        ast.#hasMagic = undefined;\n        ast.#parts = [str.substring(pos - 1)];\n        return i;\n    }\n    static fromGlob(pattern, options = {}) {\n        const ast = new AST(null, undefined, options);\n        AST.#parseAST(pattern, ast, 0, options);\n        return ast;\n    }\n    // returns the regular expression if there's magic, or the unescaped\n    // string if not.\n    toMMPattern() {\n        // should only be called on root\n        /* c8 ignore start */\n        if (this !== this.#root)\n            return this.#root.toMMPattern();\n        /* c8 ignore stop */\n        const glob = this.toString();\n        const [re, body, hasMagic, uflag] = this.toRegExpSource();\n        // if we're in nocase mode, and not nocaseMagicOnly, then we do\n        // still need a regular expression if we have to case-insensitively\n        // match capital/lowercase characters.\n        const anyMagic = hasMagic ||\n            this.#hasMagic ||\n            (this.#options.nocase &&\n                !this.#options.nocaseMagicOnly &&\n                glob.toUpperCase() !== glob.toLowerCase());\n        if (!anyMagic) {\n            return body;\n        }\n        const flags = (this.#options.nocase ? 'i' : '') + (uflag ? 'u' : '');\n        return Object.assign(new RegExp(`^${re}$`, flags), {\n            _src: re,\n            _glob: glob,\n        });\n    }\n    get options() {\n        return this.#options;\n    }\n    // returns the string match, the regexp source, whether there's magic\n    // in the regexp (so a regular expression is required) and whether or\n    // not the uflag is needed for the regular expression (for posix classes)\n    // TODO: instead of injecting the start/end at this point, just return\n    // the BODY of the regexp, along with the start/end portions suitable\n    // for binding the start/end in either a joined full-path makeRe context\n    // (where we bind to (^|/), or a standalone matchPart context (where\n    // we bind to ^, and not /).  Otherwise slashes get duped!\n    //\n    // In part-matching mode, the start is:\n    // - if not isStart: nothing\n    // - if traversal possible, but not allowed: ^(?!\\.\\.?$)\n    // - if dots allowed or not possible: ^\n    // - if dots possible and not allowed: ^(?!\\.)\n    // end is:\n    // - if not isEnd(): nothing\n    // - else: $\n    //\n    // In full-path matching mode, we put the slash at the START of the\n    // pattern, so start is:\n    // - if first pattern: same as part-matching mode\n    // - if not isStart(): nothing\n    // - if traversal possible, but not allowed: /(?!\\.\\.?(?:$|/))\n    // - if dots allowed or not possible: /\n    // - if dots possible and not allowed: /(?!\\.)\n    // end is:\n    // - if last pattern, same as part-matching mode\n    // - else nothing\n    //\n    // Always put the (?:$|/) on negated tails, though, because that has to be\n    // there to bind the end of the negated pattern portion, and it's easier to\n    // just stick it in now rather than try to inject it later in the middle of\n    // the pattern.\n    //\n    // We can just always return the same end, and leave it up to the caller\n    // to know whether it's going to be used joined or in parts.\n    // And, if the start is adjusted slightly, can do the same there:\n    // - if not isStart: nothing\n    // - if traversal possible, but not allowed: (?:/|^)(?!\\.\\.?$)\n    // - if dots allowed or not possible: (?:/|^)\n    // - if dots possible and not allowed: (?:/|^)(?!\\.)\n    //\n    // But it's better to have a simpler binding without a conditional, for\n    // performance, so probably better to return both start options.\n    //\n    // Then the caller just ignores the end if it's not the first pattern,\n    // and the start always gets applied.\n    //\n    // But that's always going to be $ if it's the ending pattern, or nothing,\n    // so the caller can just attach $ at the end of the pattern when building.\n    //\n    // So the todo is:\n    // - better detect what kind of start is needed\n    // - return both flavors of starting pattern\n    // - attach $ at the end of the pattern when creating the actual RegExp\n    //\n    // Ah, but wait, no, that all only applies to the root when the first pattern\n    // is not an extglob. If the first pattern IS an extglob, then we need all\n    // that dot prevention biz to live in the extglob portions, because eg\n    // +(*|.x*) can match .xy but not .yx.\n    //\n    // So, return the two flavors if it's #root and the first child is not an\n    // AST, otherwise leave it to the child AST to handle it, and there,\n    // use the (?:^|/) style of start binding.\n    //\n    // Even simplified further:\n    // - Since the start for a join is eg /(?!\\.) and the start for a part\n    // is ^(?!\\.), we can just prepend (?!\\.) to the pattern (either root\n    // or start or whatever) and prepend ^ or / at the Regexp construction.\n    toRegExpSource(allowDot) {\n        const dot = allowDot ?? !!this.#options.dot;\n        if (this.#root === this)\n            this.#fillNegs();\n        if (!this.type) {\n            const noEmpty = this.isStart() && this.isEnd();\n            const src = this.#parts\n                .map(p => {\n                const [re, _, hasMagic, uflag] = typeof p === 'string'\n                    ? AST.#parseGlob(p, this.#hasMagic, noEmpty)\n                    : p.toRegExpSource(allowDot);\n                this.#hasMagic = this.#hasMagic || hasMagic;\n                this.#uflag = this.#uflag || uflag;\n                return re;\n            })\n                .join('');\n            let start = '';\n            if (this.isStart()) {\n                if (typeof this.#parts[0] === 'string') {\n                    // this is the string that will match the start of the pattern,\n                    // so we need to protect against dots and such.\n                    // '.' and '..' cannot match unless the pattern is that exactly,\n                    // even if it starts with . or dot:true is set.\n                    const dotTravAllowed = this.#parts.length === 1 && justDots.has(this.#parts[0]);\n                    if (!dotTravAllowed) {\n                        const aps = addPatternStart;\n                        // check if we have a possibility of matching . or ..,\n                        // and prevent that.\n                        const needNoTrav = \n                        // dots are allowed, and the pattern starts with [ or .\n                        (dot && aps.has(src.charAt(0))) ||\n                            // the pattern starts with \\., and then [ or .\n                            (src.startsWith('\\\\.') && aps.has(src.charAt(2))) ||\n                            // the pattern starts with \\.\\., and then [ or .\n                            (src.startsWith('\\\\.\\\\.') && aps.has(src.charAt(4)));\n                        // no need to prevent dots if it can't match a dot, or if a\n                        // sub-pattern will be preventing it anyway.\n                        const needNoDot = !dot && !allowDot && aps.has(src.charAt(0));\n                        start = needNoTrav ? startNoTraversal : needNoDot ? startNoDot : '';\n                    }\n                }\n            }\n            // append the \"end of path portion\" pattern to negation tails\n            let end = '';\n            if (this.isEnd() &&\n                this.#root.#filledNegs &&\n                this.#parent?.type === '!') {\n                end = '(?:$|\\\\/)';\n            }\n            const final = start + src + end;\n            return [\n                final,\n                (0, unescape_js_1.unescape)(src),\n                (this.#hasMagic = !!this.#hasMagic),\n                this.#uflag,\n            ];\n        }\n        // We need to calculate the body *twice* if it's a repeat pattern\n        // at the start, once in nodot mode, then again in dot mode, so a\n        // pattern like *(?) can match 'x.y'\n        const repeated = this.type === '*' || this.type === '+';\n        // some kind of extglob\n        const start = this.type === '!' ? '(?:(?!(?:' : '(?:';\n        let body = this.#partsToRegExp(dot);\n        if (this.isStart() && this.isEnd() && !body && this.type !== '!') {\n            // invalid extglob, has to at least be *something* present, if it's\n            // the entire path portion.\n            const s = this.toString();\n            this.#parts = [s];\n            this.type = null;\n            this.#hasMagic = undefined;\n            return [s, (0, unescape_js_1.unescape)(this.toString()), false, false];\n        }\n        // XXX abstract out this map method\n        let bodyDotAllowed = !repeated || allowDot || dot || !startNoDot\n            ? ''\n            : this.#partsToRegExp(true);\n        if (bodyDotAllowed === body) {\n            bodyDotAllowed = '';\n        }\n        if (bodyDotAllowed) {\n            body = `(?:${body})(?:${bodyDotAllowed})*?`;\n        }\n        // an empty !() is exactly equivalent to a starNoEmpty\n        let final = '';\n        if (this.type === '!' && this.#emptyExt) {\n            final = (this.isStart() && !dot ? startNoDot : '') + starNoEmpty;\n        }\n        else {\n            const close = this.type === '!'\n                ? // !() must match something,but !(x) can match ''\n                    '))' +\n                        (this.isStart() && !dot && !allowDot ? startNoDot : '') +\n                        star +\n                        ')'\n                : this.type === '@'\n                    ? ')'\n                    : this.type === '?'\n                        ? ')?'\n                        : this.type === '+' && bodyDotAllowed\n                            ? ')'\n                            : this.type === '*' && bodyDotAllowed\n                                ? `)?`\n                                : `)${this.type}`;\n            final = start + body + close;\n        }\n        return [\n            final,\n            (0, unescape_js_1.unescape)(body),\n            (this.#hasMagic = !!this.#hasMagic),\n            this.#uflag,\n        ];\n    }\n    #partsToRegExp(dot) {\n        return this.#parts\n            .map(p => {\n            // extglob ASTs should only contain parent ASTs\n            /* c8 ignore start */\n            if (typeof p === 'string') {\n                throw new Error('string type in extglob ast??');\n            }\n            /* c8 ignore stop */\n            // can ignore hasMagic, because extglobs are already always magic\n            const [re, _, _hasMagic, uflag] = p.toRegExpSource(dot);\n            this.#uflag = this.#uflag || uflag;\n            return re;\n        })\n            .filter(p => !(this.isStart() && this.isEnd()) || !!p)\n            .join('|');\n    }\n    static #parseGlob(glob, hasMagic, noEmpty = false) {\n        let escaping = false;\n        let re = '';\n        let uflag = false;\n        for (let i = 0; i < glob.length; i++) {\n            const c = glob.charAt(i);\n            if (escaping) {\n                escaping = false;\n                re += (reSpecials.has(c) ? '\\\\' : '') + c;\n                continue;\n            }\n            if (c === '\\\\') {\n                if (i === glob.length - 1) {\n                    re += '\\\\\\\\';\n                }\n                else {\n                    escaping = true;\n                }\n                continue;\n            }\n            if (c === '[') {\n                const [src, needUflag, consumed, magic] = (0, brace_expressions_js_1.parseClass)(glob, i);\n                if (consumed) {\n                    re += src;\n                    uflag = uflag || needUflag;\n                    i += consumed - 1;\n                    hasMagic = hasMagic || magic;\n                    continue;\n                }\n            }\n            if (c === '*') {\n                if (noEmpty && glob === '*')\n                    re += starNoEmpty;\n                else\n                    re += star;\n                hasMagic = true;\n                continue;\n            }\n            if (c === '?') {\n                re += qmark;\n                hasMagic = true;\n                continue;\n            }\n            re += regExpEscape(c);\n        }\n        return [re, (0, unescape_js_1.unescape)(glob), !!hasMagic, uflag];\n    }\n}\nexports.AST = AST;\n//# sourceMappingURL=ast.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.unescape = void 0;\n/**\n * Un-escape a string that has been escaped with {@link escape}.\n *\n * If the {@link windowsPathsNoEscape} option is used, then square-brace\n * escapes are removed, but not backslash escapes.  For example, it will turn\n * the string `'[*]'` into `*`, but it will not turn `'\\\\*'` into `'*'`,\n * becuase `\\` is a path separator in `windowsPathsNoEscape` mode.\n *\n * When `windowsPathsNoEscape` is not set, then both brace escapes and\n * backslash escapes are removed.\n *\n * Slashes (and backslashes in `windowsPathsNoEscape` mode) cannot be escaped\n * or unescaped.\n */\nconst unescape = (s, { windowsPathsNoEscape = false, } = {}) => {\n    return windowsPathsNoEscape\n        ? s.replace(/\\[([^\\/\\\\])\\]/g, '$1')\n        : s.replace(/((?!\\\\).|^)\\[([^\\/\\\\])\\]/g, '$1$2').replace(/\\\\([^\\/])/g, '$1');\n};\nexports.unescape = unescape;\n//# sourceMappingURL=unescape.js.map","module.exports = require(\"fs\");","\"use strict\";\n/**\n * Copyright 2025 Wingify Software Pvt. Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = {\n    BOLD: '\\x1b[1m',\n    CYAN: '\\x1b[36m',\n    GREEN: '\\x1b[32m',\n    LIGHTBLUE: '\\x1b[94m',\n    RED: '\\x1b[31m',\n    RESET: '\\x1b[0m',\n    WHITE: '\\x1b[30m',\n    YELLOW: '\\x1b[33m',\n};\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","\"use strict\";\n/**\n * Copyright 2025 Wingify Software Pvt. Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.checkLicenseAndCopyright = void 0;\nvar CheckLicenseUtil_1 = require(\"./CheckLicenseUtil\");\nObject.defineProperty(exports, \"checkLicenseAndCopyright\", { enumerable: true, get: function () { return CheckLicenseUtil_1.checkLicenseAndCopyright; } });\n"],"names":["root","factory","exports","module","define","amd","this","Object","defineProperty","value","assertValidPattern","pattern","TypeError","length","parseClass","posixClasses","braceEscape","s","replace","rangesToString","ranges","join","glob","position","pos","charAt","Error","negs","i","sawStart","uflag","escaping","negate","endPos","rangeStart","WHILE","c","cls","unip","u","neg","entries","startsWith","push","test","slice","sranges","snegs","checkLicenseAndCopyright","author","year","paths","excludes","extensions","stoppingCriteria","DEFAULT_STOPPING_CRITERIA","console","log","AnsiColorEnum_1","default","CYAN","INITIAL_MESSAGE","RESET","error","RED","MISSING_PARAMS_MESSAGE","process","exit","copyright","licenseHeaderLines","LICENSE_HEADER_TEMPLATE","trim","split","pathList","allFilesHaveHeaders","basePath","files","collectFiles","dirPath","collectedFiles","file","headerLines","readHeaderLines","hasCopyright","hasCopyrightLine","hasLicense","hasLicenseHeader","copyrightMsg","licenseMsg","YELLOW","NOT_PRESENT_MESSAGE","output","BOLD","LIGHTBLUE","info","GREEN","SUCCESS_MESSAGE","FAILURE_MESSAGE","fs","minimatch_1","some","exclude","minimatch","existsSync","lstatSync","isDirectory","readdirSync","entry","isFile","ext","endsWith","filePath","lines","readFileSync","startIdx","stopPattern","RegExp","trimmed","err","fileHeaderLines","indexOf","line","match","includes","__importDefault","mod","__esModule","unescape","escape","AST","Minimatch","makeRe","braceExpand","defaults","filter","GLOBSTAR","sep","brace_expansion_1","assert_valid_pattern_js_1","ast_js_1","escape_js_1","unescape_js_1","p","options","nocomment","starDotExtRE","starDotExtTest","f","starDotExtTestDot","starDotExtTestNocase","toLowerCase","starDotExtTestNocaseDot","starDotStarRE","starDotStarTest","starDotStarTestDot","dotStarRE","dotStarTest","starRE","starTest","starTestDot","qmarksRE","qmarksTestNocase","$0","noext","qmarksTestNoExt","qmarksTestNocaseDot","qmarksTestNoExtDot","qmarksTestDot","qmarksTest","len","defaultPlatform","env","__MINIMATCH_TESTING_PLATFORM__","platform","Symbol","a","b","assign","def","keys","orig","constructor","super","type","parent","fromGlob","list","nobrace","mm","nonull","globMagic","set","windowsPathsNoEscape","nonegate","comment","empty","preserveMultipleSlashes","partial","globSet","globParts","nocase","isWindows","windowsNoMagicRoot","regexp","allowWindowsEscape","undefined","make","hasMagic","magicalBraces","part","debug","_","parseNegate","Set","args","rawGlobParts","map","slashSplit","preprocess","__","isUNC","isDrive","ss","parse","noglobstar","j","optimizationLevel","firstPhasePreProcess","secondPhasePreProcess","levelOneOptimize","adjascentGlobstarOptimize","parts","gs","splice","reduce","prev","pop","levelTwoFileOptimize","Array","isArray","didSomething","dd","gss","next","p2","other","splin","matched","partsMatch","emptyGSMatch","ai","bi","result","which","dot","negateOffset","matchOne","fileDrive","fileUNC","patternDrive","fdi","pdi","fd","pd","fi","pi","fl","pl","fr","pr","swallowee","hit","m","fastTest","re","toMMPattern","Reflect","twoStar","qmark","flags","pp","add","_src","forEach","open","close","ex","ff","filename","matchBase","flipNegate","ast_js_2","enumerable","get","escape_js_2","unescape_js_2","balanced","str","maybeMatch","r","range","start","end","pre","body","post","reg","begs","beg","left","right","substr","expand","escSlash","escOpen","escClose","escComma","escPeriod","escapeBraces","unescapeBraces","Math","random","numeric","parseInt","charCodeAt","parseCommaParts","postParts","shift","apply","embrace","isPadded","el","lte","y","gte","isTop","expansions","k","expansion","n","N","isNumericSequence","isAlphaSequence","isSequence","isOptions","x","width","max","incr","abs","pad","String","fromCharCode","need","z","brace_expressions_js_1","types","isExtglobType","has","startNoDot","addPatternStart","justDots","reSpecials","star","starNoEmpty","toString","copyIn","toJSON","ret","isStart","unshift","isEnd","clone","ast","opt","inBrace","braceStart","braceNeg","acc","substring","toRegExpSource","nocaseMagicOnly","toUpperCase","_glob","allowDot","noEmpty","src","aps","needNoTrav","needNoDot","repeated","bodyDotAllowed","final","_hasMagic","needUflag","consumed","magic","require","WHITE","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","call","CheckLicenseUtil_1"],"sourceRoot":""}